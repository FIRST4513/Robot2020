// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot;

import robot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
//import edu.wpi.first.wpilibj.GenericHID;

//import robot.subsystems.*;

//import robot.utils.AxisButton;
import robot.utils.POVButton;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public JoystickButton intakeCaptureOnBtn;
public JoystickButton intakeCaptureOffBtn;
public JoystickButton lowGearBtn;
public JoystickButton highGearBtn;
public JoystickButton climberBrakeOnBtn;
public JoystickButton climberBrakeOffBtn;
public JoystickButton compressorOnBtn;
public JoystickButton compressorOffBtn;
public Joystick driverPlaystation;
public JoystickButton shooterAimByJoystickBtn;
public JoystickButton climbByJoystickBtn;
public JoystickButton colorWheelThreeRotateBtn;
public JoystickButton colorWheelRotateColorBtn;
public JoystickButton colorWheelRaiseBtn;
public JoystickButton coloWheelLowerBtn;
public JoystickButton shooterAimByVision;
public JoystickButton shooterFireBtn;
public JoystickButton flywheelOffBtn;
public JoystickButton flywheelHighBtn;
public JoystickButton flywheelLowBtn;
public Joystick coDriverJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Camera View to be triggered by POV button on PS-4 Ctrlr
    public POVButton cameraFrontBtn;
    public POVButton cameraRearBtn;
    public POVButton cameraTurret1Btn;
    public POVButton cameraTurret2Btn;

    // to be triggered by Hat POV on Joystick
    public POVButton hoodStartBtn;
    public POVButton hoodLowerBtn;
    public POVButton hoodRaiseBtn;
    public POVButton turretRotateToCtrBtn;
        
    //private AxisButton xBox_Drive_Fwd_Btn;
    //private AxisButton xBox_Drive_Rev_Btn;
    //private AxisButton xBox_Drive_LTwist_Btn;
    //private AxisButton xBox_Drive_RTwist_Btn;


    public OI() {

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

coDriverJoystick = new Joystick(1);

flywheelLowBtn = new JoystickButton(coDriverJoystick, 10);
flywheelLowBtn.whenPressed(new flywheelOnLowCmd());
flywheelHighBtn = new JoystickButton(coDriverJoystick, 12);
flywheelHighBtn.whenPressed(new flywheelOnHighCmd());
flywheelOffBtn = new JoystickButton(coDriverJoystick, 8);
flywheelOffBtn.whenPressed(new flywheelOffCmd());
shooterFireBtn = new JoystickButton(coDriverJoystick, 1);
shooterFireBtn.whileHeld(new shooterFireCmd(0, 0));
shooterAimByVision = new JoystickButton(coDriverJoystick, 11);
shooterAimByVision.whileHeld(new shooterAimByVisionCmd(0, 0));
coloWheelLowerBtn = new JoystickButton(coDriverJoystick, 4);
coloWheelLowerBtn.whenPressed(new colorWheelLowerCmd());
colorWheelRaiseBtn = new JoystickButton(coDriverJoystick, 6);
colorWheelRaiseBtn.whenPressed(new colorWheelRaiseCmd());
colorWheelRotateColorBtn = new JoystickButton(coDriverJoystick, 5);
colorWheelRotateColorBtn.whenPressed(new colorWheelRotateToColorCmd());
colorWheelThreeRotateBtn = new JoystickButton(coDriverJoystick, 3);
colorWheelThreeRotateBtn.whenPressed(new colorWheelRotateThreeTimeCmd());
climbByJoystickBtn = new JoystickButton(coDriverJoystick, 9);
climbByJoystickBtn.whileHeld(new climbByJoystickCmd());
shooterAimByJoystickBtn = new JoystickButton(coDriverJoystick, 2);
shooterAimByJoystickBtn.whileHeld(new shooterAimByJoystickCmd());
driverPlaystation = new Joystick(0);

compressorOffBtn = new JoystickButton(driverPlaystation, 10);
compressorOffBtn.whenPressed(new compressorOffCmd());
compressorOnBtn = new JoystickButton(driverPlaystation, 9);
compressorOnBtn.whenPressed(new compressorOnCmd());
climberBrakeOffBtn = new JoystickButton(driverPlaystation, 6);
climberBrakeOffBtn.whenPressed(new climbReleaseBrakeCmd());
climberBrakeOnBtn = new JoystickButton(driverPlaystation, 5);
climberBrakeOnBtn.whenPressed(new climbActivateBrakeCmd());
highGearBtn = new JoystickButton(driverPlaystation, 1);
highGearBtn.whenReleased(new driveSetHighGearCmd());
lowGearBtn = new JoystickButton(driverPlaystation, 1);
lowGearBtn.whenPressed(new driveSetLowGearCmd());
intakeCaptureOffBtn = new JoystickButton(driverPlaystation, 3);
intakeCaptureOffBtn.whenPressed(new intakeCaptureOffCmd(0, 0));
intakeCaptureOnBtn = new JoystickButton(driverPlaystation, 2);
intakeCaptureOnBtn.whenPressed(new intakeCaptureOnCmd(0, 0));


        // SmartDashboard Buttons
        SmartDashboard.putData("udpStartServerCmd", new udpStartServerCmd());
        SmartDashboard.putData("udpStopServerCmd", new udpStopServerCmd());
        SmartDashboard.putData("ResetGyroCmd", new ResetGyroCmd());
        SmartDashboard.putData("ResetEncodersCmd", new ResetEncodersCmd());
        SmartDashboard.putData("autoDriveFwdTest1CmdGrp", new autoDriveFwdTest1CmdGrp());
        SmartDashboard.putData("autoFwd24TestCmdGrp", new autoFwd24TestCmdGrp());
        SmartDashboard.putData("autoRev24TestCmdGrp", new autoRev24TestCmdGrp());
        SmartDashboard.putData("autoSwingTurretToCenterPosCmd", new autoSwingTurretToCenterPosCmd());
        SmartDashboard.putData("autoNoVisionCtrLowGoalCmdGrp", new autoNoVisionCtrLowGoalCmdGrp());
        SmartDashboard.putData("autoNoVisionCtrHighGoalCmdGrp", new autoNoVisionCtrHighGoalCmdGrp());
        SmartDashboard.putData("autoNoVisionLeftHighGoalCmdGrp", new autoNoVisionLeftHighGoalCmdGrp());
        SmartDashboard.putData("autoNoVisionRightHighGoalCmdGrp", new autoNoVisionRightHighGoalCmdGrp());
        SmartDashboard.putData("autoDoNothingCmdGrp", new autoDoNothingCmdGrp());
        SmartDashboard.putData("autoLineOnlyCmdGrp", new autoLineOnlyCmdGrp());
        SmartDashboard.putData("hoodRotateResetCmd", new hoodRotateResetCmd());
        SmartDashboard.putData("cameraResetCmdGrp", new cameraResetCmdGrp());
        SmartDashboard.putData("drivetrainUpdateDashboardCmd: On", new drivetrainUpdateDashboardCmd(true));
        SmartDashboard.putData("drivetrainUpdateDashboardCmd: Off", new drivetrainUpdateDashboardCmd(false));
        SmartDashboard.putData("shooterUpdateDashboardCmd: On", new shooterUpdateDashboardCmd(true));
        SmartDashboard.putData("shooterUpdateDashboardCmd: Off", new shooterUpdateDashboardCmd(false));
        SmartDashboard.putData("climberUpdateDashboardCmd: On", new climberUpdateDashboardCmd(true));
        SmartDashboard.putData("climberUpdateDashboardCmd: Off", new climberUpdateDashboardCmd(false));
        SmartDashboard.putData("controlPanelUpdateDashboardCmd: On", new controlPanelUpdateDashboardCmd(true));
        SmartDashboard.putData("controlPanelUpdateDashboardCmd: Off", new controlPanelUpdateDashboardCmd(false));
        SmartDashboard.putData("udpUpdateDashboardCmd: On", new udpUpdateDashboardCmd(true));
        SmartDashboard.putData("udpUpdateDashboardCmd: Off", new udpUpdateDashboardCmd(false));
        SmartDashboard.putData("intakeUpdateDashboardCmd: On", new intakeUpdateDashboardCmd(true));
        SmartDashboard.putData("intakeUpdateDashboardCmd: Off", new intakeUpdateDashboardCmd(false));
        SmartDashboard.putData("auto3BallPickupCmdGrp", new auto3BallPickupCmdGrp());
        SmartDashboard.putData("hopperClearCmd", new hopperClearCmd());
        SmartDashboard.putData("autoVisionCtrHighGoalCmdGrp", new autoVisionCtrHighGoalCmdGrp());
        SmartDashboard.putData("autoVisionFwdDriveCmdGrp", new autoVisionFwdDriveCmdGrp());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    
    /*
    xBox_Drive_Fwd_Btn = new AxisButton(driverXboxCtlr, 0.02, 3);
    xBox_Drive_Fwd_Btn.whenPressed(new driveByJoystickCmd());
    xBox_Drive_Fwd_Btn.whenReleased(new driveSoftBrakeCmd());
    xBox_Drive_Fwd_Btn.whenPressed(new cameraACmdGrp());

    xBox_Drive_Rev_Btn = new AxisButton(driverXboxCtlr, 0.02, 2);
    xBox_Drive_Rev_Btn.whenPressed(new driveByJoystickCmd());
    xBox_Drive_Rev_Btn.whenReleased(new driveSoftBrakeCmd());

    //xBox_Drive_Rev_Btn.whenPressed(new cameraBCmdGrp());

    xBox_Drive_RTwist_Btn = new AxisButton(driverXboxCtlr, 0.1, 4);
    xBox_Drive_RTwist_Btn.whenPressed(new driveByJoystickCmd());
    xBox_Drive_RTwist_Btn.whenReleased(new driveSoftBrakeCmd());  
    xBox_Drive_RTwist_Btn.whenPressed(new cameraACmdGrp());

    xBox_Drive_LTwist_Btn = new AxisButton(driverXboxCtlr, 0.1, 0);
    xBox_Drive_LTwist_Btn.whenPressed(new driveByJoystickCmd());
    xBox_Drive_LTwist_Btn.whenReleased(new driveSoftBrakeCmd());
    xBox_Drive_LTwist_Btn.whenPressed(new cameraACmdGrp());
    */

        // Camera View to be triggered by POV button on PS-4 Ctrlr
        cameraFrontBtn = new POVButton(driverPlaystation, 0);         // trip on top
        cameraFrontBtn.whenPressed(new cameraFrontCmdGrp());

        cameraRearBtn = new POVButton(driverPlaystation, 180);        // trip on bottom
        cameraRearBtn.whenPressed(new hopperClearCmd()); 
        //cameraRearBtn.whenPressed(new cameraRearCmdGrp());
        
        cameraTurret1Btn = new POVButton(driverPlaystation, 90);      // trip on right
        cameraTurret1Btn.whenPressed(new cameraTurretCmdGrp());
        
        cameraTurret2Btn = new POVButton(driverPlaystation, 270);     // trip on left
        cameraTurret2Btn.whenPressed(new cameraTurretCmdGrp());

        // to be triggered by Hat POV on Joystick
        turretRotateToCtrBtn = new POVButton(coDriverJoystick, 90);            // trip on right
        //hoodTopBtn.whenPressed(new hoodTopCmd());
        turretRotateToCtrBtn.whenPressed(new autoSwingTurretToCenterPosCmd());
        
        hoodStartBtn = new POVButton(coDriverJoystick,270);        // trip on left
        //hoodBottomBtn.whenPressed(new hoodBottomCmd());
        //hoodBottomBtn.whenPressed(new autoSwingTurretToCenterPosCmd());
        hoodStartBtn.whenPressed(new hoodToPositionCmd(3.465, 5.0));

        hoodLowerBtn = new POVButton(coDriverJoystick, 0);         // trip on top
        hoodLowerBtn.whileHeld(new hoodLowerCmd());
        
        hoodRaiseBtn = new POVButton(coDriverJoystick, 180);        // trip on bottom
        hoodRaiseBtn.whileHeld(new hoodRaiseCmd());

    }


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public Joystick getdriverPlaystation() {
        return driverPlaystation;
    }

public Joystick getcoDriverJoystick() {
        return coDriverJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

