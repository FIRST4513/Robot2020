// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot;

import edu.wpi.first.hal.FRCNetComm.tInstances;
import edu.wpi.first.hal.FRCNetComm.tResourceType;
import edu.wpi.first.hal.HAL;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import robot.commands.*;
import robot.subsystems.*;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.Preferences;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    Command autoCmd;
    
    SendableChooser<Command> chooser = new SendableChooser<Command>();
    SendableChooser<String> locChooser = new SendableChooser<String>();
    SendableChooser<String> orientChooser = new SendableChooser<String>();
    SendableChooser<String> xBoxLRChooser = new SendableChooser<String>();
    SendableChooser<String> dualChooser = new SendableChooser<String>();  
    SendableChooser<String> firstChooser = new SendableChooser<String>(); 
    SendableChooser<String> rocketChooser = new SendableChooser<String>(); 

    public static Timer sysTimer = new Timer();
	String fmsGameData;
	Boolean switchLeftLit, scaleLeftLit, switchRightLit, scaleRightLit;
	Boolean printBatVoltFlag;
	public static Preferences prefs;
    String line;
    double logCntr = 0;

    // Robot Position States enums
    public static enum RobotPosState {TRAVEL, EJECT_MAIN, EJECT_ROCKET_MID, EJECT_ROCKET_HIGH, EJECT_HATCH_FWD,
                                              RETREIVE_CARGO, RETREIVE_HATCH_FLOOR, RETREIVE_HATCH_LS, 
                                              CARGO_HOLD, HATCH_HOLD, OTHER};

    public static RobotPosState robotPosState = RobotPosState.TRAVEL;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public static Drivetrain drivetrain;
public static climberSubSys climberSubSys;
public static intakeSubSys intakeSubSys;
public static shooterSubSys shooterSubSys;
public static storageSubSys storageSubSys;
public static controlPanelSubSys controlPanelSubSys;
public static logger logger;
public static udpSubSys udpSubSys;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
drivetrain = new Drivetrain();
climberSubSys = new climberSubSys();
intakeSubSys = new intakeSubSys();
shooterSubSys = new shooterSubSys();
storageSubSys = new storageSubSys();
controlPanelSubSys = new controlPanelSubSys();
logger = new logger();
udpSubSys = new udpSubSys();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        HAL.report(tResourceType.kResourceType_Framework, tInstances.kFramework_RobotBuilder);

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }
}
