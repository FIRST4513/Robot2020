// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.subsystems;


//import robot.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Solenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class climberSubSys extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private Solenoid brakeSolenoid;
private AnalogPotentiometer climbPotentiometer;
private WPI_TalonSRX climbWinchMotor1;
private WPI_TalonSRX climbWinchMotor2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public climberSubSys() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
brakeSolenoid = new Solenoid(0, 1);
addChild("BrakeSolenoid",brakeSolenoid);

        
climbPotentiometer = new AnalogPotentiometer(0, 5.0, 0.0);
addChild("ClimbPotentiometer",climbPotentiometer);

        
climbWinchMotor1 = new WPI_TalonSRX(10);


        
climbWinchMotor2 = new WPI_TalonSRX(11);


        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    private double displayCnt = 1;
    public enum BrakeValue { BRAKE, NO_BRAKE; } 

    public BrakeValue currentBrakeValue = BrakeValue.NO_BRAKE;

    private static final double POT_CONVERSION_FACTOR = 1;
    private static final double POT_TOP_VALUE    = 5;
    private static final double POT_BOTTOM_VALUE = 0;

    private double currentPotValue = 0;
    private double currentHeightValue = 0;
    private double currentPowerValue = 0;

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        currentPotValue = climbPotentiometer.get();
        currentHeightValue = getHeight();

        if ( (displayCnt % 10) == 0) {
            // only update dashboard every 200 ms
            updateSmartDashboard();
            displayCnt = 0;
        } else {
            displayCnt++;
        }
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public double getHeight() {
        return currentPotValue * POT_CONVERSION_FACTOR;        
    }   

    public double getPot() {
        return currentPotValue;
    }

    public void turnMotorAtSpeed(double speed, boolean overrideFlag) {

        if(overrideFlag) {
            currentPowerValue = speed;
            climbWinchMotor1.set(currentPowerValue);
            climbWinchMotor2.set(currentPowerValue);
            return;    
        }

        if(currentBrakeValue == BrakeValue.BRAKE) { 
            //safety so that it does not attempt to turn winchMotor while the break is applied
            currentPowerValue = 0;
            climbWinchMotor1.set(currentPowerValue);
            climbWinchMotor2.set(currentPowerValue);
            return;
        }

        if(speed >= 0 && currentPotValue >= POT_TOP_VALUE) {//speed raising, checking top limit
            currentPowerValue = 0;
        }else if(speed <= 0 && currentPotValue <= POT_BOTTOM_VALUE) {//speed lowering, checking bottom limit
            currentPowerValue = 0;
        }else {
            currentPowerValue = speed;
        }

        climbWinchMotor1.set(currentPowerValue);
        climbWinchMotor2.set(currentPowerValue);
        

    }

    public void setBrake() {
        brakeSolenoid.set(true);
        currentBrakeValue = BrakeValue.BRAKE;
        currentPowerValue = 0;
    }

    public void releaseBrake() {
        brakeSolenoid.set(false);
        currentBrakeValue = BrakeValue.NO_BRAKE;
    }

    public void updateSmartDashboard() {
        
        SmartDashboard.putNumber("Current Pot Value", currentPotValue);
        SmartDashboard.putNumber("Current Height Value", currentHeightValue);
        SmartDashboard.putNumber("Current Power Value", currentPowerValue);
        
        if(currentBrakeValue == BrakeValue.BRAKE) {
            SmartDashboard.putString("Current Brake Status", "Brake Activated");
        }else {
            SmartDashboard.putString("Current Brake Status", "Brake Inactive");
        }
        
    }

}
