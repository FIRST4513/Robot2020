// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.subsystems;


//import robot.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedControllerGroup;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class climberSubSys extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private Solenoid brakeSolenoid;
private AnalogPotentiometer climbPotentiometer;
private WPI_TalonSRX climbWinchMotor1;
private WPI_TalonSRX climbWinchMotor2;
private SpeedControllerGroup climbMotorGroup;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private static final boolean BRAKE_ON = true;
    private static final boolean BRAKE_OFF = false;
    private final double CLIMBTOTALHEIGHT = 55.5;           // Height in inches from bottom to top

    private final double CLIMBPOTBOTTOMVALUE = 1.2;         // pot value when fully lowered
    private final double CLIMBPOTTOPVALUE = 2.4;            // pot value when fully raised
    private final double CLIMBPOTRANGEVALUE = CLIMBPOTBOTTOMVALUE - CLIMBPOTTOPVALUE;

    private double climbPotbottomValue = CLIMBPOTBOTTOMVALUE;
    private double climbPotTopValue = CLIMBPOTTOPVALUE;
    private double climbPotCurrentValue = 0;
    private double climbPosition = 0;


    public climberSubSys() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
brakeSolenoid = new Solenoid(0, 1);
addChild("BrakeSolenoid",brakeSolenoid);

        
climbPotentiometer = new AnalogPotentiometer(0, 5.0, 0.0);
addChild("ClimbPotentiometer",climbPotentiometer);

        
climbWinchMotor1 = new WPI_TalonSRX(10);


        
climbWinchMotor2 = new WPI_TalonSRX(11);


        
climbMotorGroup = new SpeedControllerGroup(climbWinchMotor1, climbWinchMotor2  );
addChild("ClimbMotorGroup",climbMotorGroup);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    
    climbWinchMotor2.follow(climbWinchMotor1);

    // Re-Calibrate climber Pot
    climbPotbottomValue = climbPotentiometer.get();                 // Get value while on bottom from start
    climbPotTopValue = climbPotbottomValue + CLIMBPOTRANGEVALUE;    // Clculate new top from range    

}
    
    private double displayCnt = 1;
    public enum BrakeValue { BRAKE, NO_BRAKE; } 
    public BrakeValue currentBrakeValue = BrakeValue.NO_BRAKE;
    private static final double POT_CONVERSION_FACTOR = 1;
    private static final double POT_TOP_VALUE    = 5;
    private static final double POT_BOTTOM_VALUE = 0;
    private double currentPotValue = 0;
    private double currentHeightValue = 0;
    private double currentPowerValue = 0;

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        updateSmartDashboard();
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void climbMotorStop(){
        currentPowerValue = 0;
        climbWinchMotor1.set(currentPowerValue);
    }

    public void climbMotorSetAtSpeed(double speed, boolean overrideFlag) {
        if(overrideFlag) {
            // This is dangerous run at own risk
            currentPowerValue = speed;
            climbWinchMotor1.set(currentPowerValue);
            return;    
        }

        double climbPotCurrentValue = getPot();
        if (speed > 0) {
            // Were Raising the climber
            if (climbPotCurrentValue < climbPotTopValue) {
                // were Not at the top so continue raising
                climbWinchMotor1.set(speed / 2);     // raise with less power because ther is no weight to climber
                currentPowerValue = speed / 2;
                return;            
            } else {
                // were at the top so stop motor and exit
                climbMotorStop();
                currentPowerValue = 0;
                return;  
            }
         } else {
            // Were Lowering the climber
            if (currentBrakeValue == BrakeValue.BRAKE){
                // brake is applied cannnot lower climber
                climbMotorStop();
                currentPowerValue = 0;
                return;            
            }
    
            if (climbPotCurrentValue > climbPotbottomValue) {  
                // were Not at the bottom so continue lowering
                climbWinchMotor1.set(speed);
                currentPowerValue = speed;            
                return;            
            } else {
                // were at the bottom so stop motor and exit
                climbMotorStop();
                currentPowerValue = 0;
                return;  
            }
        }
    }

    // ------- Potentiometer Methods -----------
    public double getHeight() {
        return getPot() * POT_CONVERSION_FACTOR;        
    }   

    public double getPot() {
        currentPotValue = climbPotentiometer.get();
        return currentPotValue;
    }

    // --------- Brake Methods -----------------
    public void setBrake() {
        brakeSolenoid.set(BRAKE_ON);
        currentBrakeValue = BrakeValue.BRAKE;
    }

    public void releaseBrake() {
        brakeSolenoid.set(BRAKE_OFF);
        currentBrakeValue = BrakeValue.NO_BRAKE;
    }

    // ----------- Update Smartdash ------------------
    public void updateSmartDashboard() {
        if ( (displayCnt % 10) != 0) {
            displayCnt++;
            return;
        }
        displayCnt = 0;

        currentPotValue = climbPotentiometer.get();
        currentHeightValue = getHeight();        
        SmartDashboard.putNumber("Current Climb Pot Value", currentPotValue);
        //SmartDashboard.putNumber("Current Climb Height Value", currentHeightValue);
        SmartDashboard.putNumber("Current ClimbPower Value", currentPowerValue);
        
        if(currentBrakeValue == BrakeValue.BRAKE) {
            SmartDashboard.putString("Current Brake Status", "Brake Activated");
        }else {
            SmartDashboard.putString("Current Brake Status", "Brake Inactive");
        }
        
    }

}
