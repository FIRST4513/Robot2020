// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.subsystems;


//import robot.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
//import edu.wpi.first.wpilibj.PIDOutput;
//import edu.wpi.first.wpilibj.PIDSource;
//import edu.wpi.first.wpilibj.DoubleSolenoid.Value;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.Solenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class intakeSubSys extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    private static final double ROLLERSTOPPEDSPEED = 0.0;
    private static final double ROLLERRETRACTSPEED = 0.5;
    private static final double ROLLEREJECTSPEED = -1.0;

    private static final double MIXERSTOPPEDSPEED = 0.0;
    private static final double MIXERFEEDSPEED    = 0.5;
    private static final double MIXERMIXSPEED   = -0.5;

    private static final boolean VALVE_EXTEND_STATE = true;
    private static final boolean VALVE_RETRACT_STATE = false;

    public enum RollerState {RETRACT, EJECT, STOPPED} ;
    private RollerState rollerState = RollerState.STOPPED;

    public enum MixerMotorState {OFF, FEED, MIX} ;
    private MixerMotorState mixerMotorState = MixerMotorState.OFF;

    public enum IntakeValveState {EXTENDED, RETRACTED} ;
    private IntakeValveState  intakeValveState = IntakeValveState.RETRACTED; 

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_VictorSPX intakeRollerMtr;
private Solenoid intakeExtentionValve;
private WPI_VictorSPX mixerMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private double displayCnt = 2;
    //private boolean intakeExtended = false;
    private double mixerPower = 0;

    public intakeSubSys() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
intakeRollerMtr = new WPI_VictorSPX(6);


        
intakeExtentionValve = new Solenoid(0, 2);
addChild("IntakeExtentionValve",intakeExtentionValve);

        
mixerMotor = new WPI_VictorSPX(12);


        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop\
        if(rollerState == RollerState.STOPPED) { intakeRollerMtr.set (ROLLERSTOPPEDSPEED); }
        else if(rollerState == RollerState.EJECT) { intakeRollerMtr.set (ROLLEREJECTSPEED); }
        else if(rollerState == RollerState.RETRACT) { intakeRollerMtr.set (ROLLERRETRACTSPEED); }

        if(intakeValveState == IntakeValveState.RETRACTED) { intakeExtentionValve.set (VALVE_RETRACT_STATE) ; }
        if(intakeValveState == IntakeValveState.EXTENDED) { intakeExtentionValve.set (VALVE_EXTEND_STATE) ; }

        if(mixerMotorState == MixerMotorState.OFF) { intakeRollerMtr.set (MIXERSTOPPEDSPEED); }
        else  if(mixerMotorState == MixerMotorState.FEED) { intakeRollerMtr.set (MIXERFEEDSPEED); }
        else  if(mixerMotorState == MixerMotorState.MIX) { intakeRollerMtr.set (MIXERMIXSPEED); }

        if ( (displayCnt % 10) == 0) {
            // only update dashboard every 200 ms
            updateSmartDashboard();
            displayCnt = 0;
        } else {
            displayCnt++;
        }
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

        public void stopMixer() {
            mixerMotor.set(0);
            mixerPower = 0;
        }

        public void setMixerPower(double power) {
            mixerMotor.set(power);
            mixerPower = power;
        }

        public void setMixerMotorOff() {
            mixerMotorState = MixerMotorState.OFF;
        }

        public void SetMixerMotorMIX() {
            mixerMotorState = MixerMotorState.MIX;
        }

        public void SetMixerMotorFEED() {
            mixerMotorState = MixerMotorState.FEED;
        }

        public void rollerMotorEject() {
            rollerState = RollerState.EJECT;
        }

        public void rollerMotorRetract() {
            rollerState = RollerState.RETRACT; 
        }

        public void rollerMotorOff() {
            rollerState = RollerState.STOPPED;
        }

        public void extendIntake() {
            intakeValveState = IntakeValveState.EXTENDED;
        }

        public void retractIntake() {
            intakeValveState = IntakeValveState.RETRACTED;
        }

        public void updateSmartDashboard() {
            if (rollerState == RollerState.EJECT) { SmartDashboard.putString("Intake Roller State", "Ejecting") ; }
            else if (rollerState == RollerState.RETRACT) { SmartDashboard.putString("Intake Roller State", "Retracting") ; }
            else if (rollerState == RollerState.STOPPED) { SmartDashboard.putString("Intake Roller State", "Stopped") ; }

            if (intakeValveState == IntakeValveState.EXTENDED) { SmartDashboard.putString("Intake Valve State", "Extended") ; }
            else if (intakeValveState == IntakeValveState.RETRACTED) { SmartDashboard.putString("Intake Valve State", "Retracted") ; }

            if (mixerMotorState == MixerMotorState.OFF) { SmartDashboard.putString("Mixer Motor State", "OFF") ;} 
            else if (mixerMotorState == MixerMotorState.FEED) { SmartDashboard.putString("Mixer Motor State", "FEED") ;} 
            else if (mixerMotorState == MixerMotorState.MIX) { SmartDashboard.putString("Mixer Motor State", "MIX") ; }
            
            SmartDashboard.putNumber("Mixer Power", mixerPower);
        }
}

