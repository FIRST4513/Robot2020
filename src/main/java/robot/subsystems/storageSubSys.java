// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.subsystems;


import robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpiutil.math.Num;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class storageSubSys extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonSRX storageBottomRollerMotor;
private WPI_TalonSRX storageEjectMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final DigitalInput[] ballSensors = {storageBallSensor1, storageBallSensor2, storageBallSensor3, storageBallSensor4, storageBallSensor5};

    public storageSubSys() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
storageBottomRollerMotor = new WPI_TalonSRX(0);


        
storageEjectMotor = new WPI_TalonSRX(5);


        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new storageHoldCmd());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    /*     Sensor Methods     */

    public boolean[] getBallSensors() {
        boolean[] ballDetected = new boolean[ballSensors.length]; // Make array with size equal to number of ball sensors.

        for(int i = 0; i >= ballSensors.length - 1; i++) { // Subtract one to match array indexing.
            ballDetected[i] = ballSensors[i].get();
        }

        return ballDetected;
    }
    
    public int getBallCount() {
        int numberOfBalls = 0;
        
        for (DigitalInput ballSensor : ballSensors) {
            if (ballSensor.get() == true) {
                numberOfBalls++;
            }
        }
        
        return numberOfBalls;
    }

    /*     Motor Methods     */
    public void stopBottomRollers() {
        storageBottomRollerMotor.set(0);
    }

    public void moveBottomRollers(double power) {
        storageBottomRollerMotor.set(power);
    }

    public void stopEjectMotor() {
        storageEjectMotor.set(0);
    }

    public void moveEjectMotor(double power) {
        storageEjectMotor.set(power);
    }
}

