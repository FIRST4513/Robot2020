// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import robot.Robot;

/**
 *
 */
public class rotateThreeTimeCmd extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public rotateThreeTimeCmd() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.controlPanelSubSys);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
        enum State {NOCONTACT,SAME,CHANGE,DONE};
        State state = State.SAME;
        double changeCount = 0;
       final double MAXCOUNT = 25;
       final double ROTATESPEED = 0.5;
        String lastColor;
        String currentColor;
    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
       /* if (Robot.controlPanelSubSys.getContactSwitch()== false){
            state = State.NOCONTACT;
            return;
        }
        */
        lastColor = Robot.controlPanelSubSys.getSensorColor();
        currentColor = lastColor;
        state = State.SAME;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
      /*  if (Robot.controlPanelSubSys.getContactSwitch()== false){
            state = State.NOCONTACT;
            return;
        }
        else if ( (state == State.NOCONTACT) && (Robot.controlPanelSubSys.getContactSwitch()== true) ){
            state = State.SAME;
            lastColor = Robot.controlPanelSubSys.getSensorColor();
            currentColor = lastColor;
        }
        */
        currentColor = Robot.controlPanelSubSys.getSensorColor();
        if (currentColor == lastColor){
            state = State.SAME;
        }
        else{
            state = State.CHANGE;
            changeCount++ ;
            lastColor = currentColor;
        }
        if (changeCount > MAXCOUNT){
            state = State.DONE;
            return;
        }
        Robot.controlPanelSubSys.spinnerTurn(ROTATESPEED);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        if(state == State.DONE){
            return true;
        }
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.controlPanelSubSys.spinnerStop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
