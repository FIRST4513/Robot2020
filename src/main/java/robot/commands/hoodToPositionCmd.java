// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import robot.Robot;

/**
 *
 */
public class hoodToPositionCmd extends Command {
    String line = "";

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_position;
    private double m_timeout;
 
    private double currHoodPos = 0;
    private double targetHoodPosition = 0;
    private static final double HOOD_DEADBAND = 0.01;

    private enum HoodStatus {MOVING, ONTARGET, DONE};
    private HoodStatus hoodStatus = HoodStatus.DONE;

    //private enum HoodDirState {RAISE, LOWER, DONE};
    //private HoodDirState hoodDirState = HoodDirState.DONE;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public hoodToPositionCmd(double position, double timeout) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_position = position;
        m_timeout = timeout;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        setTimeout(m_timeout);
        targetHoodPosition = m_position;
        currHoodPos = Robot.shooterSubSys.getHoodPot();

        line = ("hoodToPositionCmd Started!    TgtPos=" + targetHoodPosition + "   CurrPosition=" + currHoodPos + "  timeout=" + m_timeout);
        System.out.println(line);
        Robot.logger.appendLog(line);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        currHoodPos = Robot.shooterSubSys.getHoodPot();
        double moveSpeed = Robot.shooterSubSys.calcHoodMotorForPosition( currHoodPos, targetHoodPosition, HOOD_DEADBAND);
        
        if ( moveSpeed == 0 ) {
            // we have reached our target so time to end
            Robot.shooterSubSys.turretHoodMotorStop();
            line = ("shooterAimByVisionCmd Hood Reached target position!  CurrPosition=" + currHoodPos +
                    "  targetHoodPosition=" + targetHoodPosition);
            Robot.logger.appendLog(line);
            System.out.println(line); 
            hoodStatus = HoodStatus.DONE;
            return;
        }

        Robot.shooterSubSys.turretHoodMotorSet( moveSpeed, false);
        line = ("shooterAimByVisionCmd Hood Moving!  CurrPosition=" + currHoodPos +
            "  moveSpeed=" + moveSpeed +
            "  targetHoodPosition=" + targetHoodPosition);
        Robot.logger.appendLog(line);
        System.out.println(line);
        hoodStatus = HoodStatus.MOVING;
    }


    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {

        if( isTimedOut()){
            line = "hoodToPosCmd has Timed out !!!!!";
            System.out.println(line);
            Robot.logger.appendLog(line);
            return true;
        }
        if (hoodStatus == HoodStatus.DONE){
            line = "hoodToPosCmd has reached our target currHoodPos=" + currHoodPos +"  !!";
            System.out.println(line);
            Robot.logger.appendLog(line);
            return true;
        }

        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.shooterSubSys.turretHoodMotorStop();
        line = "hoodToPosCmd has ended!";
            System.out.println(line);
            Robot.logger.appendLog(line);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}

