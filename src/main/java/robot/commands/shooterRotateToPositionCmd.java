// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import robot.Robot;
//import robot.subsystems.logger;

/**
 *
 */
public class shooterRotateToPositionCmd extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_position;
    private double m_timeout;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    String line;
    private static double currentHoodAngle = 0;
    private static double targetHoodAngle = 0;
    private static final double TARGET_X_DEADBAND = 0.75;

    private enum TurretRotateState {ROTATING, DONE};
    private TurretRotateState turretRotateState  = TurretRotateState. DONE;


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public shooterRotateToPositionCmd(double position, double speed, boolean brake, double timeout) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_position = position;
        m_timeout = timeout;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        setTimeout(m_timeout);
        targetHoodAngle = m_position;
        currentHoodAngle = Robot.shooterSubSys.getRotateAngle();
        line = ("shooterRotateToPositionCmd Started! currAngle=" + currentHoodAngle +
                 "  Remaining Angle=" + (targetHoodAngle - currentHoodAngle));
        System.out.println(line);
        Robot.logger.appendLog(line);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        currentHoodAngle = Robot.shooterSubSys.getRotateAngle();
        double turretRotateSpeed = Robot.shooterSubSys.calcRotateMotorForPosition(currentHoodAngle, targetHoodAngle, TARGET_X_DEADBAND);

        if (turretRotateSpeed == 0) {
            // were done
            Robot.shooterSubSys.turretRotateMotorStop(); 
            turretRotateState = TurretRotateState.DONE;
            return;
        } else {
        turretRotateState = TurretRotateState.ROTATING;
        }

        // send power to motor
        Robot.shooterSubSys.turretRotateMotorSet(turretRotateSpeed, false);
        line = ("We are rotating to our Target " +
                " CurrentHoodAngle=" + currentHoodAngle +
                " targetHoodAngle=" + targetHoodAngle +
                " TurretRotateSpeed= " + turretRotateSpeed);
        System.out.println(line);
        Robot.logger.appendLog(line);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        
        if (isTimedOut()) {
            line = "shooterRotateToPositionCmd has Timed out !!!!!";
            System.out.println(line);
            Robot.logger.appendLog(line);
            return true;
        }

        if (turretRotateState == TurretRotateState.DONE) {
            // Were done
            line = "We have reached our target currAngle=" + currentHoodAngle +"  !!";
            System.out.println(line);
            Robot.logger.appendLog(line);
            return true;
        }

        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.shooterSubSys.turretRotateMotorStop();
        line = "shooterRotateToPositionCmd has ended!";
        System.out.println(line);
        Robot.logger.appendLog(line);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
