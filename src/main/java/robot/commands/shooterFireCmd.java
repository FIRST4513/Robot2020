// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import robot.Robot;

/**
 *
 */
public class shooterFireCmd extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private enum ShooterState {
        UP_TO_SPEED, UNDER_SPEED, FEEDING
    }

    private static final double SHOOTER_SPEED = 5200; // In RPM
    private static final double MIXER_SPEED = 0.7; // NEEDS TUNING!
    private static final double RPM_DEADBAND = 100;

    ShooterState shooterState = ShooterState.UNDER_SPEED;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public shooterFireCmd() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        Robot.shooterSubSys.updateFlywheelSetPoint(SHOOTER_SPEED);
        if(Robot.shooterSubSys.getFlywheelRPM() >= (SHOOTER_SPEED - RPM_DEADBAND)) {
            shooterState = ShooterState.UP_TO_SPEED;
            Robot.intakeSubSys.setMixerPower(MIXER_SPEED);
            Robot.shooterSubSys.startHandoff();
        } else {
            shooterState = ShooterState.UNDER_SPEED;
        }
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        if(Robot.shooterSubSys.getFlywheelRPM() >= (SHOOTER_SPEED - RPM_DEADBAND)) {
            shooterState = ShooterState.UP_TO_SPEED;
            Robot.intakeSubSys.setMixerPower(MIXER_SPEED);
            Robot.shooterSubSys.startHandoff();
        } else {
            shooterState = ShooterState.UNDER_SPEED;
            Robot.intakeSubSys.setMixerPower(MIXER_SPEED);
            Robot.shooterSubSys.stopHandoff();
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.intakeSubSys.stopMixer();
        Robot.shooterSubSys.stopHandoff();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
