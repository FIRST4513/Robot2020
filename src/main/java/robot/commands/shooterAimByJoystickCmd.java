// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import robot.Robot;
import robot.subsystems.shooterSubSys.HoodSwitchPressed;
import robot.subsystems.shooterSubSys.TurretSwitchPressed;

/**
 *
 */
public class shooterAimByJoystickCmd extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public shooterAimByJoystickCmd() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooterSubSys);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double joyTwist = Robot.oi.getcoDriverJoystick().getTwist();
        double joyThrottle = Robot.oi.getcoDriverJoystick().getThrottle();
        double joyY = Robot.oi.getcoDriverJoystick().getY();
        boolean buttonPressed = Robot.oi.getcoDriverJoystick().getRawButton(11);

        if(buttonPressed == true) {
            if(Robot.shooterSubSys.checkTurretLimitSwitches() == TurretSwitchPressed.NEITHER) {
                Robot.shooterSubSys.moveTurret((joyTwist * ((joyThrottle + 1)/2)));
            }

            if(Robot.shooterSubSys.checkTurretLimitSwitches() == TurretSwitchPressed.LEFT) {
                if(joyTwist <= 0) {
                    Robot.shooterSubSys.stopTurret();
                } else {
                    Robot.shooterSubSys.moveTurret((joyTwist * ((joyThrottle + 1)/2)));
                }
            }

            if(Robot.shooterSubSys.checkTurretLimitSwitches() == TurretSwitchPressed.RIGHT) {
                if(joyTwist >= 0) {
                    Robot.shooterSubSys.stopTurret();
                } else {
                    Robot.shooterSubSys.moveTurret((joyTwist * ((joyThrottle + 1)/2)));
                }
            }

            if(Robot.shooterSubSys.checkHoodLimitSwitches() == HoodSwitchPressed.NEITHER) {
                Robot.shooterSubSys.moveHood((joyY * ((joyThrottle + 1)/2)));
            }

            if(Robot.shooterSubSys.checkHoodLimitSwitches() == HoodSwitchPressed.RETRACTED) {
                if(joyY <= 0) {
                    Robot.shooterSubSys.stopHood();
                } else {
                    Robot.shooterSubSys.moveHood((joyY * ((joyThrottle + 1)/2)));
                }
            }

            if(Robot.shooterSubSys.checkHoodLimitSwitches() == HoodSwitchPressed.EXTENDED) {
                if(joyY >= 0) {
                    Robot.shooterSubSys.stopHood();
                } else {
                    Robot.shooterSubSys.moveHood((joyY * ((joyThrottle + 1)/2)));
                }
            }
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.shooterSubSys.stopTurret();
        Robot.shooterSubSys.stopHood();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
